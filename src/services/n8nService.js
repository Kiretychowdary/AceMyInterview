// n8n AI Service for AceMyInterview
// Handles all communication with n8n webhooks for AI-generated content

const API_BASE_URL = 'http://localhost:5000/api';

class N8nService {
  /**
   * Fetch MCQ Questions from n8n AI
   * @param {Object} options - Configuration options
   * @param {string} options.topic - Question topic (e.g., 'JavaScript', 'React')
   * @param {string} options.difficulty - Difficulty level ('easy', 'medium', 'hard')
   * @param {number} options.count - Number of questions to generate
   * @param {string} options.type - Question type ('multiple-choice', 'true-false')
   * @returns {Promise<Object>} Response with questions array
   */
  static async getMCQQuestions(options = {}) {
    const {
      topic = 'JavaScript',
      difficulty = 'medium',
      count = 5,
      type = 'multiple-choice'
    } = options;

    try {
      console.log('üéØ =================== FRONTEND MCQ REQUEST ===================');
      console.log(`ü§ñ Requesting ${count} ${difficulty} MCQ questions about ${topic}`);
      console.log(`üîó API Endpoint: ${API_BASE_URL}/mcq-questions`);
      
      const requestPayload = { topic, difficulty, count, type };
      console.log('üì§ Request Payload:', requestPayload);
      
      // First, try n8n endpoint
      const response = await fetch(`${API_BASE_URL}/mcq-questions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestPayload)
      });

      console.log('üì° Response Status:', response.status, response.statusText);

      if (!response.ok) {
        throw new Error(`n8n endpoint failed with status: ${response.status}`);
      }

      const data = await response.json();
      console.log('üì• Response Data:', data);
      
      if (!data.success) {
        throw new Error(data.error || 'n8n endpoint returned failure');
      }

      console.log(`‚úÖ Successfully fetched ${data.questions?.length || 0} MCQ questions from n8n`);
      console.log('üìä Questions:', data.questions);
      console.log('üéØ ========================================================');
      return data;

    } catch (error) {
      console.log('‚ùå ================= FRONTEND ERROR =================');
      console.error(`üí• n8n failed: ${error.message}`);
      console.log('üîÑ Trying Gemini AI fallback...');
      
      // Fallback to Gemini API
      try {
        console.log('ü§ñ Attempting Gemini AI fallback...');
        const geminiResponse = await fetch(`${API_BASE_URL}/gemini-questions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            topic,
            difficulty,
            count,
            type: 'mcq'
          })
        });

        if (!geminiResponse.ok) {
          throw new Error(`Gemini API failed with status: ${geminiResponse.status}`);
        }

        const geminiData = await geminiResponse.json();
        
        if (!geminiData.success) {
          throw new Error(geminiData.error || 'Gemini API returned failure');
        }

        console.log(`‚úÖ Successfully fetched ${geminiData.questions?.length || 0} MCQ questions from Gemini AI`);
        
        // Mark as Gemini fallback
        geminiData.metadata.source = 'gemini-fallback';
        geminiData.metadata.note = 'Generated by Gemini AI (n8n unavailable)';
        
        return geminiData;

      } catch (geminiError) {
        console.error(`‚ùå Gemini fallback also failed: ${geminiError.message}`);
        
        // Final fallback to static questions
        return this.getFallbackMCQQuestions(options);
      }
    }
  }

  /**
   * Get fallback MCQ questions when both n8n and Gemini fail
   */
  static getFallbackMCQQuestions(options = {}) {
    const { topic, difficulty, count = 5 } = options;
    
    // Provide some basic fallback questions
    const fallbackQuestions = [
      {
        question: "What is a variable in programming?",
        options: [
          "A container for storing data values",
          "A type of function",
          "A programming language",
          "A computer component"
        ],
        correctAnswer: 0,
        explanation: "A variable is a container for storing data values that can be changed during program execution."
      },
      {
        question: "What does HTML stand for?",
        options: [
          "Hyper Text Markup Language",
          "High Tech Modern Language",
          "Home Tool Markup Language",
          "Hyperlink and Text Markup Language"
        ],
        correctAnswer: 0,
        explanation: "HTML stands for Hyper Text Markup Language and is used to create web pages."
      }
    ];

    return {
      success: true,
      questions: fallbackQuestions.slice(0, count),
      metadata: {
        topic,
        difficulty,
        count: Math.min(count, fallbackQuestions.length),
        generatedAt: new Date().toISOString(),
        source: 'static-fallback',
        note: 'Both n8n and Gemini AI were unavailable, using static questions'
      }
    };
  }

  /**
   * Fetch Coding Problems from n8n AI
   * @param {Object} options - Configuration options
   * @param {string} options.topic - Problem topic (e.g., 'algorithms', 'data-structures')
   * @param {string} options.difficulty - Difficulty level ('easy', 'medium', 'hard')
   * @param {string} options.language - Programming language ('javascript', 'python', 'java', 'cpp')
   * @param {string} options.problemType - Type of problem ('algorithm', 'data-structure')
   * @param {boolean} options.includeTestCases - Whether to include test cases
   * @returns {Promise<Object>} Response with problem object
   */
  static async getCodingProblem(options = {}) {
    const {
      topic = 'algorithms',
      difficulty = 'medium',
      language = 'javascript',
      problemType = 'algorithm',
      includeTestCases = true
    } = options;

    try {
      console.log(`ü§ñ Requesting ${difficulty} coding problem: ${topic} in ${language}`);
      
      // First, try n8n endpoint
      const response = await fetch(`${API_BASE_URL}/coding-problems`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          topic,
          difficulty,
          language,
          problemType,
          includeTestCases
        })
      });

      if (!response.ok) {
        throw new Error(`n8n endpoint failed with status: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'n8n endpoint returned failure');
      }

      console.log(`‚úÖ Successfully fetched coding problem from n8n: ${data.problem?.title || 'Unknown'}`);
      return data;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è n8n failed: ${error.message}, trying Gemini AI fallback...`);
      
      // Fallback to Gemini API
      try {
        const geminiResponse = await fetch(`${API_BASE_URL}/gemini-questions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            topic,
            difficulty,
            language,
            type: 'coding'
          })
        });

        if (!geminiResponse.ok) {
          throw new Error(`Gemini API failed with status: ${geminiResponse.status}`);
        }

        const geminiData = await geminiResponse.json();
        
        if (!geminiData.success) {
          throw new Error(geminiData.error || 'Gemini API returned failure');
        }

        console.log(`‚úÖ Successfully fetched coding problem from Gemini AI`);
        
        // Mark as Gemini fallback and adjust structure
        geminiData.metadata.source = 'gemini-fallback';
        geminiData.metadata.note = 'Generated by Gemini AI (n8n unavailable)';
        
        return geminiData;

      } catch (geminiError) {
        console.error(`‚ùå Gemini fallback also failed: ${geminiError.message}`);
        
        // Final fallback to static problem
        return this.getFallbackCodingProblem(options);
      }
    }
  }

  /**
   * Get fallback coding problem when both n8n and Gemini fail
   */
  static getFallbackCodingProblem(options = {}) {
    const { topic, difficulty, language = 'javascript' } = options;
    
    return {
      success: true,
      problem: {
        title: "Two Sum Problem",
        description: "Given an array of integers and a target sum, return indices of two numbers that add up to the target.",
        inputFormat: "First line contains array length n, second line contains n integers, third line contains target sum.",
        outputFormat: "Two integers representing the indices of the two numbers that add up to target.",
        constraints: "1 ‚â§ n ‚â§ 1000, -1000 ‚â§ array[i] ‚â§ 1000",
        examples: "Input: [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: nums[0] + nums[1] = 2 + 7 = 9"
      },
      metadata: {
        topic,
        difficulty,
        language,
        generatedAt: new Date().toISOString(),
        source: 'static-fallback',
        note: 'Both n8n and Gemini AI were unavailable, using static problem'
      }
    };
  }

  /**
   * Fetch Interview Questions from n8n AI
   * @param {Object} options - Configuration options
   * @param {string} options.jobRole - Job role/position
   * @param {string} options.experience - Experience level ('junior', 'mid-level', 'senior')
   * @param {string[]} options.skills - Array of technical skills
   * @param {string} options.questionType - Type of questions ('behavioral', 'technical', 'mixed')
   * @param {number} options.count - Number of questions to generate
   * @returns {Promise<Object>} Response with questions array
   */
  static async getInterviewQuestions(options = {}) {
    const {
      jobRole = 'Software Developer',
      experience = 'mid-level',
      skills = ['JavaScript', 'React'],
      questionType = 'behavioral',
      count = 3
    } = options;

    try {
      console.log(`ü§ñ Requesting ${count} ${questionType} interview questions for ${jobRole}`);
      
      const response = await fetch(`${API_BASE_URL}/interview-questions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobRole,
          experience,
          skills,
          questionType,
          count
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch interview questions');
      }

      console.log(`‚úÖ Successfully fetched ${data.questions?.length || 0} interview questions`);
      return data;
    } catch (error) {
      console.error('‚ùå Error fetching interview questions:', error);
      throw new Error(`Failed to fetch interview questions: ${error.message}`);
    }
  }

  /**
   * Check service health and n8n connectivity
   * @returns {Promise<Object>} Health status information
   */
  static async checkHealth() {
    try {
      const response = await fetch(`${API_BASE_URL}/health`);
      const data = await response.json();
      
      console.log('üîç Health check:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Health check failed:', error);
      return { 
        status: 'error', 
        error: error.message,
        services: {
          codeforces: 'unknown',
          n8n: 'disconnected'
        }
      };
    }
  }

  /**
   * Test n8n connectivity with a sample request
   * @returns {Promise<boolean>} True if n8n is responsive
   */
  static async testConnection() {
    try {
      const testResponse = await this.getMCQQuestions({
        topic: 'JavaScript',
        difficulty: 'easy',
        count: 1
      });
      
      return testResponse.success && testResponse.questions?.length > 0;
    } catch (error) {
      console.warn('‚ö†Ô∏è n8n connection test failed:', error.message);
      return false;
    }
  }

  /**
   * Get available topics for MCQ questions
   * @returns {string[]} Array of available topics
   */
  static getAvailableTopics() {
    return [
      'JavaScript', 'React', 'Node.js', 'Python', 'Java', 'C++',
      'Data Structures', 'Algorithms', 'System Design', 'Database',
      'Web Development', 'Machine Learning', 'DevOps', 'Security'
    ];
  }

  /**
   * Get available difficulty levels
   * @returns {string[]} Array of difficulty levels
   */
  static getDifficultyLevels() {
    return ['easy', 'medium', 'hard'];
  }

  /**
   * Get available programming languages for coding problems
   * @returns {Object} Object with language codes and names
   */
  static getProgrammingLanguages() {
    return {
      javascript: { name: 'JavaScript', extension: 'js' },
      python: { name: 'Python', extension: 'py' },
      java: { name: 'Java', extension: 'java' },
      cpp: { name: 'C++', extension: 'cpp' },
      csharp: { name: 'C#', extension: 'cs' },
      go: { name: 'Go', extension: 'go' }
    };
  }
}

export default N8nService;
